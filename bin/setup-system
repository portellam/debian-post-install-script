#!/bin/false

#
# Filename:         setup-system
# Description:      Business facing functions.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <sources>
    source lib-all
# </sources>

# <functions>
    function SetParameters
    {
        if [[ ! -z "${_ARE_PARAMS_SET_SETUP_SOFTWARE}" ]] \
            && "${_ARE_COMMON_PARAMS_SET}"; then
            return 0
        fi

        declare -gr _ARE_PARAMS_SET_SETUP_SYSTEM=true

        # <remarks> File lists of apps for given distributions go here. </remarks>

        # <summary> Debian/APT </summary>
            declare -agr APT_PACKAGES_TO_INSTALL_LIST_FILES=(
                ["list-apt-drivers.txt"]="generic drivers"
                ["list-apt-gaming.txt"]="gaming apps"
                ["list-apt-gui-tools.txt"]="GUI apps"
                ["list-apt-internet.txt"]="internet apps"
                ["list-apt-libraries.txt"]="software libraries"
                ["list-apt-media.txt"]="multimedia apps"
                ["list-apt-office.txt"]="office apps"
                ["list-apt-repos.txt"]="repositories"
                ["list-apt-required.txt"]="required apps"
                ["list-apt-security.txt"]="security apps"
                ["list-apt-suites.txt"]="software suites"
                ["list-apt-term-tools.txt"]="terminal apps"
                ["list-apt-vga-drivers.txt"]="video device drivers"
            )

            declare -agr APT_PACKAGES_TO_REMOVE_LIST_FILES=(
                ["list-apt-to-remove.txt"]="unsorted apps"
            )

        # <summary> Flathub </summary>
            declare -agr FLATHUB_PACKAGES_TO_INSTALL_LIST_FILES=(
                ["list-flatpak-desktop.txt"]="desktop apps"
                ["list-flatpak-dev-tools.txt"]="development apps"
                ["list-flatpak-gaming.txt"]="gaming apps"
                ["list-flatpak-gui-tools.txt"]="GUI apps"
                ["list-flatpak-internet.txt"]="internet apps"
                ["list-flatpak-libraries.txt"]="software libraries"
                ["list-flatpak-media.txt"]="multimedia apps"
                ["list-flatpak-office.txt"]="office apps"
                ["list-flatpak-prism-break.txt"]="Prism-Break recommended apps"
            )

            declare -agr APT_PACKAGES_TO_REMOVE_LIST_FILES=(
                ["list-apt-to-remove.txt"]="unsorted apps"
            )

        # <remarks> Functions can go here. </remarks>
    }

    function ModifySourcesFile
    {
        AskToExecuteOrSkip "Modify software sources file?" || return "${?}"
        PromptToChangeSourcesFile && UpdateSourcesFile
        return "${?}"
    }

    function InstallDistributionSoftware
    {
        AskToExecuteOrSkip "Install software?" || return "${?}"

        case true in
            "${_PACMAN_IS_APT}" )
                PACKAGES_TO_INSTALL_LIST_FILES="${APT_PACKAGES_TO_INSTALL_LIST_FILES[@]}" ;;

            "${_PACMAN_IS_UNKNOWN}" )
                return 0 ;;
        esac

        for KEY in "${!PACKAGES_TO_INSTALL_LIST_FILES[@]}"; do
            local -a PACKAGES_LIST
            local VALUE="${PACKAGES_TO_INSTALL_LIST_FILES[$KEY]}"

            AskToExecuteOrSkip "Install ${VALUE}?" || continue
            ReadPackagesFromFile "PACKAGES_LIST" "${VALUE}" \
            && InstallPackage "PACKAGES_LIST" || break
        done

        return "${?}"
    }

    function InstallRepositorySoftware
    {
        command -v flathub &> /dev/null && return 0
        AskToExecuteOrSkip "Install from Flathub?" || return "${?}"
        local -a PACKAGES_LIST
        local PACKAGES_DELIM=""

        for KEY in "${!FLATHUB_PACKAGES_TO_INSTALL_LIST_FILES[@]}"; do
            local VALUE="${FLATHUB_PACKAGES_TO_INSTALL_LIST_FILES[$KEY]}"

            AskToExecuteOrSkip "Add ${VALUE} to list?" || continue
            ReadPackagesFromFile "PACKAGES_LIST" "${VALUE}" || break
        done

        SetGivenDelimitedStringFromEnum "PACKAGES_LIST" "PACKAGES_DELIM" " "
        flatpak update -y && flatpak install -y "${PACKAGES_DELIM}"
        return "${?}"
    }

    function UninstallDistributionSoftware
    {
        AskToExecuteOrSkip "Uninstall software?" || return "${?}"
        local -a PACKAGES_TO_REMOVE_LIST_FILES

        case true in
            "${_PACMAN_IS_APT}" )
                PACKAGES_TO_REMOVE_LIST_FILES="${APT_PACKAGES_TO_REMOVE_LIST_FILES[@]}" ;;

            "${_PACMAN_IS_UNKNOWN}" )
                return 0 ;;
        esac

        for KEY in "${!PACKAGES_TO_REMOVE_LIST_FILES[@]}"; do
            local -a PACKAGES_LIST
            local VALUE="${PACKAGES_TO_REMOVE_LIST_FILES[$KEY]}"

            AskToExecuteOrSkip "Uninstall ${VALUE}?" || continue
            ReadPackagesFromFile "PACKAGES_LIST" "${VALUE}" \
            && UninstallPackage "PACKAGES_LIST" || break
        done

        return "${?}"
    }
# </functions>

# <main>
    SetParameters
    unset SetParameters
# </main>