#!/bin/false

#
# Filename:         setup-software
# Description:      Download software packages and Git repositories.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <sources>
    source setup-system
# </sources>

# <functions>
    function SetParameters
    {
        if [[ ! -z "${_ARE_COMMON_PARAMS_SET}" ]] \
            && "${_ARE_COMMON_PARAMS_SET}"; then
            return 0
        fi

        declare -g _ARE_COMMON_PARAMS_SET=true

        # <remarks> Execution Flags </remarks>
        declare -g _IS_EXECUTION_QUIET=false

        # <remarks>
        # Color coding
        # Reference URL: 'https://www.shellhacks.com/bash-colors'
        # </remarks>
        declare -g _SET_COLOR_GREEN='\033[0;32m'
        declare -g _SET_COLOR_RED='\033[0;31m'
        declare -g _SET_COLOR_YELLOW='\033[0;33m'
        declare -g _RESET_COLOR='\033[0m'

        # <remarks> Append output </remarks>
        declare -g _PREFIX_NOTE="${_SET_COLOR_YELLOW}Note:${_RESET_COLOR}"
        declare -g _PREFIX_ERROR="${_SET_COLOR_YELLOW}An error occurred:${_RESET_COLOR}"
        declare -g _PREFIX_FAIL="${_SET_COLOR_RED}Failure:${_RESET_COLOR}"
        declare -g _PREFIX_PASS="${_SET_COLOR_GREEN}Success:${_RESET_COLOR}"
        declare -g _SUFFIX_FAIL="${_SET_COLOR_RED}[Failure]${_RESET_COLOR}"
        declare -g _SUFFIX_PASS="${_SET_COLOR_GREEN}[Success]${_RESET_COLOR}"
        declare -g _SUFFIX_SKIP="${_SET_COLOR_YELLOW}[Skipped]${_RESET_COLOR}"
        declare -g _SUFFIX_WORK="${_SET_COLOR_YELLOW}[Working]${_RESET_COLOR}"

        # <remarks> File templates. </remarks>
        declare -g _PREFIX_COMMENT="#"              # <note> Added this var, to prevent IDE from showing visual errors when a string contains a comment variable. </note>

        declare -ga _DISCLAIMER_FILE_CONTENTS=(
            "${_PREFIX_COMMENT} Generated by 'portellam/deploy-vfio-main'"
            "${_PREFIX_COMMENT} WARNING: Any modifications to this file will be modified by 'deploy-vfio-main'"
            "${_PREFIX_COMMENT}"
        )

        declare -ga _VFIO_DISCLAIMER_FILE_CONTENTS=(
            "${_DISCLAIMER_FILE_CONTENTS[@]}"
            "${_PREFIX_COMMENT} Run lspci to view hardware information."
            "${_PREFIX_COMMENT} You must run update-initramfs(8) to effect this change."
            "${_PREFIX_COMMENT}"
        )

        # <remarks> Memory </remarks>
        declare -gi _1_GIB_IN_KIB=1048576
        declare -gi _2_MIB_IN_KIB=2048
        declare -gi _AVAILABLE_MEMORY=0
        declare -gi _MAX_MEMORY=$( cat /proc/meminfo | grep MemTotal | cut -d ":" -f 2 | awk 'END {print $1}' )
        declare -gi _MIN_MEMORY=$(( 8 * ${_1_GIB_IN_KIB} ))
        SetFreeMemory

        # <remarks> System validation </remarks>
        declare -g _OUTPUT_INVALID_PACKAGE_MANAGER="${_PREFIX_ERROR} Command '${_PACKAGE_MANAGER}' is not supported."
        declare -gl _PACKAGE_MANAGER
        declare -gl _OPERATING_SYSTEM="$( lsb_release -is )"
    }

    function FindPackage
    {
        if [[ -z "${1}" ]] \
            || [[ -z "${_PACKAGE_MANAGER}" ]]; then
            echo -e "${_PREFIX_ERROR} Input values are empty."
            return 1
        fi

        case "${_PACKAGE_MANAGER}" in
            "apt" )
                apt list "${1}" ;;

            "dnf" )
                dnf search "${1}" ;;

            "pacman" )
                pacman -Ss "${1}" ;;

            "gentoo" )
                emerge --search "${1}" ;;

            "urpmi" )
                urpmq "${1}" ;;

            "yum" )
                yum search "${1}" ;;

            "zypper" )
                zypper se "${1}" ;;

            * )
                echo -e "${_OUTPUT_INVALID_PACKAGE_MANAGER}"
                return 1 ;;
        esac

        SetExitCode

        if [[ "${_LAST_EXIT_CODE}" -ne 0 ]]; then
            case "${_PACKAGE_MANAGER}" in
                *" "* )
                    echo -e "${_PREFIX_ERROR} Packages '${_PACKAGE_MANAGER}' were not found." ;;

                * )
                    echo -e "${_PREFIX_ERROR} Package '${_PACKAGE_MANAGER}' was not found." ;;
            esac

            return 1
        fi

        return "${_LAST_EXIT_CODE}"
    }

    function InstallPackage
    {
        if [[ -z "${_PACKAGE_MANAGER}" ]] \
            || [[ -z "${1}" ]]; then
            echo -e "${_PREFIX_ERROR} Input values are empty."
            return 1
        fi

        local DO_REINSTALL=false
        local OPTION=""

        if [[ "${2}" == true ]]; then
            DO_REINSTALL=true
        fi

        # <remarks> Auto-update and auto-install selected packages </remarks>
        case "${_PACKAGE_MANAGER}" in
            "apt" )
                if "${DO_REINSTALL}"; then
                    OPTION="--reinstall -o Dpkg::Options::=--force-confmiss"
                fi

                apt update && apt full-upgrade -y && apt install -y "${OPTION}" "${1}" || return 1 ;;

            "dnf" )
                dnf upgrade && dnf install "${1}" ;;

            "pacman" )
                pacman -Syu && pacman -S "${1}" ;;

            "gentoo" )
                emerge -u @world && emerge "${1}" ;;

            "urpmi" )
                urpmi --auto-update && urpmi "${1}" ;;

            "yum" )
                yum update && yum install "${1}" ;;

            "zypper" )
                zypper refresh && zypper in "${1}" ;;

            * )
                echo -e "${_OUTPUT_INVALID_PACKAGE_MANAGER}"
                false ;;
        esac

        PrintSuffixPassOrFail "Installing software packages..."
        return "${?}"
    }

    function IsInstalledPackage
    {
        if [[ -z "${_PACKAGE_MANAGER}" ]] \
            || [[ -z "${1}" ]]; then
            echo -e "${_PREFIX_ERROR} Input values are empty."
            return 1
        fi

        local GET_COMMAND=""

        # <remarks> Check if package is not installed </remarks>
        case "${_PACKAGE_MANAGER}" in
            "apt" )
                GET_COMMAND="sudo dpkg -s" ;;

            * )
                echo -e "${_OUTPUT_INVALID_PACKAGE_MANAGER}"
                return 1 ;;
        esac

        local -i COUNT_DELIM=$( echo "${1}" | wc -w )
        local GET_PACKAGE='echo "${1}" | cut -d ' ' -f "${COUNT_DELIM}"'

        while [[ ! -z "${PACKAGE}" ]]; do
            local PACKAGE=$( eval "${GET_PACKAGE}" )
            eval "${GET_COMMAND} ${PACKAGE}" || return 1
            (( COUNT_DELIM-- ))
        done

        return 0
    }

    function UninstallPackage
    {
        if [[ -z "${_PACKAGE_MANAGER}" ]] \
            || [[ -z "${1}" ]]; then
            echo -e "${_PREFIX_ERROR} Input values are empty."
            return 1
        fi

        # <remarks> Uninstall selected packages </remarks>
        case "${_PACKAGE_MANAGER}" in
            "apt" )
                apt uninstall "${1}" ;;

            "dnf" )
                dnf remove "${1}" ;;

            "pacman" )
                pacman -R "${1}" ;;

            "gentoo" )
                emerge -Cv "${1}" ;;

            "urpmi" )
                urpme "${1}" ;;

            "yum" )
                yum remove "${1}" ;;

            "zypper" )
                zypper remove "${1}" ;;

            * )
                echo -e "${_OUTPUT_INVALID_PACKAGE_MANAGER}"
                false ;;
        esac

        PrintSuffixPassOrFail "Uninstalling software packages..."
        return "${?}"
    }

    function UpdateOrCloneGitRepo
    {
        local DO_AUTO_ANSWER_YES=false

        if [[ "${4}" == true ]]; then
            DO_AUTO_ANSWER_YES=true
        fi

        if [[ -z "${3}" ]] \
            || [[ -z "${2}" ]] \
            || [[ -z "${1}" ]]; then
            echo -e "${_PREFIX_ERROR} Input values are empty."
            return 1
        fi

        if [[ ! -d "${1}${2}" ]] \
            && ! sudo mkdir -p "${1}${3}"; then
            echo -e "${_PREFIX_ERROR} Failed to create directory '${1}${3}'."
            return 1
        fi

        # <remarks> Update existing GitHub repository. </remarks>
        if [[ -d "${1}${2}" ]]; then
            cd "${1}${2}"

            if ! git pull &> /dev/null; then
                echo -e "${_PREFIX_ERROR} Failed to update repository."
                return 1
            fi

            return 0

        # <remarks> Clone new GitHub repository. </remarks>
        elif [[ -d "${1}${3}" ]]; then
            for COUNT in "${_COUNT_LIST[@]}"; do
                if ! "${DO_AUTO_ANSWER_YES}"; then
                    read -r -p "Clone repo '${2}'? [Y/n]: " ANSWER
                else
                    ANSWER="Y"
                fi

                case "${ANSWER}" in
                    [Yy]* )
                        cd "${1}${3}"

                        if ! git clone "https://github.com/${2}" &> /dev/null; then
                            echo -e "${_PREFIX_ERROR} Failed to download repository."
                            return 1
                        fi

                        return 0 ;;

                    [Nn]* )
                        return 255 ;;

                    * )
                        echo "Please answer 'Y' or 'N'." ;;
                esac
            done

            return 1

        else
            return 1
        fi
    }
# </functions>

# <main>
    SetParameters
    unset SetParameters
# </main>