#!/bin/false

#
# Filename:         setup-software
# Description:      Download software packages and Git repositories.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <sources>
    source setup-system
# </sources>

# <functions>
    function SetParameters
    {
        if [[ ! -z "${_ARE_PARAMS_SET_SETUP_SOFTWARE}" ]] \
            && "${_ARE_COMMON_PARAMS_SET}"; then
            return 0
        fi

        declare -gr _ARE_PARAMS_SET_SETUP_SOFTWARE=true

        declare -gr _LIST_OF_OPERATING_SYSTEMS_WITH_APT_DELIM="debian bodhi deepin knoppix mint peppermint pop ubuntu kubuntu lubuntu xubuntu"
        declare -gr _LIST_OF_OPERATING_SYSTEMS_WITH_DNF_OR_YUM_DELIM="redhat alma berry centos cern clearos elastix fedora fermi frameos mageia opensuse oracle scientific suse"
        declare -gr _LIST_OF_OPERATING_SYSTEMS_WITH_PACMAN_DELIM="arch manjaro"
        declare -gr _LIST_OF_OPERATING_SYSTEMS_WITH_PORTAGE_DELIM="gentoo"
        declare -gr _LIST_OF_OPERATING_SYSTEMS_WITH_URPMI_DELIM="opensuse"
        declare -gr _LIST_OF_OPERATING_SYSTEMS_WITH_ZYPPER_DELIM="mandriva mageia"

        declare -gl _COMMAND_LIST_PACKAGE=""
        declare -gl _COMMAND_INSTALL_PACKAGE=""
        declare -gl _COMMAND_UNINSTALL_PACKAGE=""
        declare -gl _PACKAGE_MANAGER=""

        # <remarks> Functions can go here. </remarks>
        GetPackageManager
        GetCommandToInstallPackage
        GetCommandToListPackage
        GetCommandToUninstallPackage
        # IsThisLinuxDistributionSupported

        declare -r _COMMAND_LIST_PACKAGE _COMMAND_INSTALL_PACKAGE _COMMAND_UNINSTALL_PACKAGE _PACKAGE_MANAGER
    }

    function GetCommandToInstallPackage
    {
        case "${_PACKAGE_MANAGER}" in
            "apt" )
                _COMMAND_INSTALL_PACKAGE="apt update && apt full-upgrade -y && apt install -y " ;;

            "dnf" )
                _COMMAND_INSTALL_PACKAGE="dnf upgrade && dnf install " ;;

            "pacman" )
                _COMMAND_INSTALL_PACKAGE="pacman -Syu && pacman -S " ;;

            "gentoo" )
                _COMMAND_INSTALL_PACKAGE="merge -u @world && emerge " ;;

            "urpmi" )
                _COMMAND_INSTALL_PACKAGE="urpmi --auto-update && urpmi " ;;

            "yum" )
                _COMMAND_INSTALL_PACKAGE="yum update && yum install " ;;

            "zypper" )
                _COMMAND_INSTALL_PACKAGE="zypper refresh && zypper in " ;;

            * )
                return 1 ;;
        esac

        return 0
    }

    function GetCommandToListPackage
    {
        case "${_PACKAGE_MANAGER}" in
            "apt" )
                _COMMAND_LIST_PACKAGE="apt list " ;;

            "dnf" )
                _COMMAND_LIST_PACKAGE="dnf search " ;;

            "pacman" )
                _COMMAND_LIST_PACKAGE="pacman -Ss " ;;

            "gentoo" )
                _COMMAND_LIST_PACKAGE="emerge --search " ;;

            "urpmi" )
                _COMMAND_LIST_PACKAGE="urpme " ;;

            "yum" )
                _COMMAND_LIST_PACKAGE="yum search " ;;

            "zypper" )
                _COMMAND_LIST_PACKAGE="zypper se " ;;

            * )
                return 1 ;;
        esac

        return 0
    }

    function GetCommandToUninstallPackage
    {
        case "${_PACKAGE_MANAGER}" in
            "apt" )
                _COMMAND_UNINSTALL_PACKAGE="apt uninstall " ;;

            "dnf" )
                _COMMAND_UNINSTALL_PACKAGE="dnf remove " ;;

            "pacman" )
                _COMMAND_UNINSTALL_PACKAGE="pacman -R " ;;

            "gentoo" )
                _COMMAND_UNINSTALL_PACKAGE="emerge -Cv " ;;

            "urpmi" )
                _COMMAND_UNINSTALL_PACKAGE="urpme " ;;

            "yum" )
                _COMMAND_UNINSTALL_PACKAGE="yum remove " ;;

            "zypper" )
                _COMMAND_UNINSTALL_PACKAGE="zypper remove " ;;

            * )
                return 1 ;;
        esac

        return 0
    }

    function GetPackageManager
    {
        if [[ "${_LIST_OF_OPERATING_SYSTEMS_WITH_APT_DELIM}" =~ .*${_OPERATING_SYSTEM_DISTRIBUTION_NAME}.* ]]; then
            _PACKAGE_MANAGER="apt"

        elif [[ "${_LIST_OF_OPERATING_SYSTEMS_WITH_DNF_OR_YUM_DELIM}" =~ .*${_OPERATING_SYSTEM_DISTRIBUTION_NAME}.* ]]; then
            _PACKAGE_MANAGER="dnf"

            if command -v "${_PACKAGE_MANAGER}"; then
                return 0
            fi

            _PACKAGE_MANAGER="yum"

        elif [[ "${_LIST_OF_OPERATING_SYSTEMS_WITH_PACMAN_DELIM}" =~ .*${_OPERATING_SYSTEM_DISTRIBUTION_NAME}.* ]]; then
            _PACKAGE_MANAGER="pacman"

        elif [[ "${_LIST_OF_OPERATING_SYSTEMS_WITH_PORTAGE_DELIM}" =~ .*${_OPERATING_SYSTEM_DISTRIBUTION_NAME}.* ]]; then
            _PACKAGE_MANAGER="portage"

        elif [[ "${_LIST_OF_OPERATING_SYSTEMS_WITH_URPMI_DELIM}" =~ .*${_OPERATING_SYSTEM_DISTRIBUTION_NAME}.* ]]; then
            _PACKAGE_MANAGER="urpmi"

        elif [[ "${_LIST_OF_OPERATING_SYSTEMS_WITH_ZYPPER_DELIM}" =~ .*${_OPERATING_SYSTEM_DISTRIBUTION_NAME}.* ]]; then
            _PACKAGE_MANAGER="zypper"

        else
            _PACKAGE_MANAGER=""
        fi

        if ! command -v "${_PACKAGE_MANAGER}" &> /dev/null; then
            return 1
        fi

        return 0
    }

    function IsThisLinuxDistributionSupported
    {
        local KERNEL="$( uname -o | tr '[:upper:]' '[:lower:]' )"

        if [[ -z "${KERNEL}" ]]; then
            echo -e "${_PREFIX_ERROR} Failed to parse system kernel."
            return 1
        fi

        if [[ -z "${_OPERATING_SYSTEM_DISTRIBUTION_NAME}" ]]; then
            echo -e "${_PREFIX_ERROR} Failed to parse operating system."
            return 1
        fi

        if [[ "${KERNEL}" != *"linux"* ]]; then
            echo -e "${_PREFIX_ERROR} Kernel '$( uname -o )' is not supported."
            return 1
        fi

        if [[ -z "${_PACKAGE_MANAGER}" ]]; then
            echo -e "${_PREFIX_ERROR} Distribution '$( lsb_release -is )' is not supported."
            return 1
        fi

        return 0
    }

    function FindPackage
    {
        if [[ -z "${_COMMAND_LIST_PACKAGE}" ]]; then
            return 1
        fi

        eval "${_COMMAND_LIST_PACKAGE} ${1}"
        # PrintSuffixPassOrFail "Searching software packages..."
        return "${?}"
    }

    function InstallPackage
    {
        if [[ -z "${_COMMAND_INSTALL_PACKAGE}" ]]; then
            return 1
        fi

        eval "${_COMMAND_INSTALL_PACKAGE} ${1}"
        # PrintSuffixPassOrFail "Installing software packages..."
        return "${?}"
    }

    function IsInstalledPackage
    {
        if [[ -z "${1}" ]]; then
            echo -e "${_PREFIX_ERROR} Input values are empty."
            return 1
        fi

        local GET_COMMAND=""

        # <remarks> Check if package is not installed </remarks>
        case "${_PACKAGE_MANAGER}" in
            "apt" )
                GET_COMMAND="sudo dpkg -s" ;;

            * )
                return 1 ;;
        esac

        local -i COUNT_DELIM=$( echo "${1}" | wc -w )
        local GET_PACKAGE='echo "${1}" | cut -d ' ' -f "${COUNT_DELIM}"'

        while [[ ! -z "${PACKAGE}" ]]; do
            local PACKAGE=$( eval "${GET_PACKAGE}" )
            eval "${GET_COMMAND} ${PACKAGE}" || return 1
            (( COUNT_DELIM-- ))
        done

        return 0
    }

    function UninstallPackage
    {
        if [[ -z "${_COMMAND_UNINSTALL_PACKAGE}" ]]; then
            return 1
        fi

        eval "${_COMMAND_UNINSTALL_PACKAGE} ${1}"
        # PrintSuffixPassOrFail "Uninstalling software packages..."
        return "${?}"
    }

    function UpdateGitRepo
    {
        if [[ ! -d "${1}${2}" ]] \
            && ! sudo mkdir -p "${1}${3}"; then
            echo -e "${_PREFIX_ERROR} Failed to create directory '${1}${3}'."
            return 1
        fi

        if [[ -d "${1}${2}" ]]; then
            cd "${1}${2}"

            if ! git pull &> /dev/null; then
                echo -e "${_PREFIX_ERROR} Failed to update repository."
                return 1
            fi

            return 0

        elif [[ -d "${1}${3}" ]]; then
            if ! git clone "https://github.com/${2}" &> /dev/null; then
                echo -e "${_PREFIX_ERROR} Failed to clone repository."
                return 1
            fi

        else
            return 1
        fi
    }
# </functions>

# <main>
    SetParameters
    unset SetParameters
# </main>