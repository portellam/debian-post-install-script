#!/bin/false

#
# Filename:         setup-software
# Description:      Download software packages and Git repositories.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <sources>
    source setup-system
# </sources>

# <functions>
    function SetParameters
    {
        if [[ ! -z "${_ARE_PARAMS_SET_SETUP_SOFTWARE}" ]] \
            && "${_ARE_COMMON_PARAMS_SET}"; then
            return 0
        fi

        declare -g _ARE_PARAMS_SET_SETUP_SOFTWARE=true

        declare -gr _LIST_OF_OPERATING_SYSTEMS_WITH_APT_DELIM="debian bodhi deepin knoppix mint peppermint pop ubuntu kubuntu lubuntu xubuntu"
        declare -gr _LIST_OF_OPERATING_SYSTEMS_WITH_DNF_OR_YUM_DELIM="redhat alma berry centos cern clearos elastix fedora fermi frameos mageia opensuse oracle scientific suse"
        declare -gr _LIST_OF_OPERATING_SYSTEMS_WITH_PACMAN_DELIM="arch manjaro"
        declare -gr _LIST_OF_OPERATING_SYSTEMS_WITH_PORTAGE_DELIM="gentoo"
        declare -gr _LIST_OF_OPERATING_SYSTEMS_WITH_URPMI_DELIM="opensuse"
        declare -gr _LIST_OF_OPERATING_SYSTEMS_WITH_ZYPPER_DELIM="mandriva mageia"

        # <remarks> System validation </remarks>
        declare -gl _PACKAGE_MANAGER=""
        GetPackageManager
    }

    function SetCommandToInstallPackage
    {
        case true in
            "apt" )
                apt list "${1}" ;;

            "dnf" )
                dnf search "${1}" ;;

            "pacman" )
                pacman -Ss "${1}" ;;

            "gentoo" )
                emerge --search "${1}" ;;

            "urpmi" )
                urpmq "${1}" ;;

            "yum" )
                yum search "${1}" ;;

            "zypper" )
                zypper se "${1}" ;;

            * )
                return 1 ;;
        esac
    }

    function FindPackage
    {
        if [[ -z "${1}" ]] \
            || [[ -z "${_PACKAGE_MANAGER}" ]]; then
            echo -e "${_PREFIX_ERROR} Input values are empty."
            return 1
        fi

        case "${_PACKAGE_MANAGER}" in
            "apt" )
                apt list "${1}" ;;

            "dnf" )
                dnf search "${1}" ;;

            "pacman" )
                pacman -Ss "${1}" ;;

            "gentoo" )
                emerge --search "${1}" ;;

            "urpmi" )
                urpmq "${1}" ;;

            "yum" )
                yum search "${1}" ;;

            "zypper" )
                zypper se "${1}" ;;

            * )
                return 1 ;;
        esac

        SetExitCode

        if [[ "${_LAST_EXIT_CODE}" -ne 0 ]]; then
            case "${_PACKAGE_MANAGER}" in
                *" "* )
                    echo -e "${_PREFIX_ERROR} Packages '${_PACKAGE_MANAGER}' were not found." ;;

                * )
                    echo -e "${_PREFIX_ERROR} Package '${_PACKAGE_MANAGER}' was not found." ;;
            esac

            return 1
        fi

        return "${_LAST_EXIT_CODE}"
    }

    # function GetLinuxDistro
    # {
    #     local KERNEL="$( uname -o | tr '[:upper:]' '[:lower:]' )"

    #     if [[ -z "${KERNEL}" ]]; then
    #         echo -e "${_PREFIX_ERROR} Failed to parse system kernel."
    #         return 1
    #     fi

    #     if [[ -z "${_OPERATING_SYSTEM_DISTRIBUTION_NAME}" ]]; then
    #         echo -e "${_PREFIX_ERROR} Failed to parse operating system."
    #         return 1
    #     fi

    #     if [[ "${KERNEL}" != *"linux"* ]]; then
    #         echo -e "${_PREFIX_ERROR} Kernel '$( uname -o )' is not supported."
    #         return 1
    #     fi

    #     if ! GetPackageManager; then
    #         echo -e "${_PREFIX_ERROR} Distribution '$( lsb_release -is )' is not supported."
    #         return 1
    #     fi

    #     return 0
    # }

    function GetPackageManager
    {
        if [[ "${_LIST_OF_OPERATING_SYSTEMS_WITH_APT_DELIM}" =~ .*${_OPERATING_SYSTEM_DISTRIBUTION_NAME}.* ]]; then
            _PACKAGE_MANAGER="apt"

        elif [[ "${_LIST_OF_OPERATING_SYSTEMS_WITH_DNF_OR_YUM_DELIM}" =~ .*${_OPERATING_SYSTEM_DISTRIBUTION_NAME}.* ]]; then
            _PACKAGE_MANAGER="dnf"

            if command -v "${_PACKAGE_MANAGER}"; then
                return 0
            fi

            _PACKAGE_MANAGER="yum"

        elif [[ "${_LIST_OF_OPERATING_SYSTEMS_WITH_PACMAN_DELIM}" =~ .*${_OPERATING_SYSTEM_DISTRIBUTION_NAME}.* ]]; then
            _PACKAGE_MANAGER="pacman"

        elif [[ "${_LIST_OF_OPERATING_SYSTEMS_WITH_PORTAGE_DELIM}" =~ .*${_OPERATING_SYSTEM_DISTRIBUTION_NAME}.* ]]; then
            _PACKAGE_MANAGER="portage"

        elif [[ "${_LIST_OF_OPERATING_SYSTEMS_WITH_URPMI_DELIM}" =~ .*${_OPERATING_SYSTEM_DISTRIBUTION_NAME}.* ]]; then
            _PACKAGE_MANAGER="urpmi"

        elif [[ "${_LIST_OF_OPERATING_SYSTEMS_WITH_ZYPPER_DELIM}" =~ .*${_OPERATING_SYSTEM_DISTRIBUTION_NAME}.* ]]; then
            _PACKAGE_MANAGER="zypper"

        else
            _PACKAGE_MANAGER=""
        fi

        if ! command -v "${_PACKAGE_MANAGER}" &> /dev/null; then
            return 1
        fi

        return 0
    }

    function InstallPackage
    {
        if [[ -z "${_PACKAGE_MANAGER}" ]] \
            || [[ -z "${1}" ]]; then
            echo -e "${_PREFIX_ERROR} Input values are empty."
            return 1
        fi

        local DO_REINSTALL=false
        local OPTION=""

        if [[ "${2}" == true ]]; then
            DO_REINSTALL=true
        fi

        # <remarks> Auto-update and auto-install selected packages </remarks>
        case "${_PACKAGE_MANAGER}" in
            "apt" )
                if "${DO_REINSTALL}"; then
                    OPTION="--reinstall -o Dpkg::Options::=--force-confmiss"
                fi

                apt update && apt full-upgrade -y && apt install -y "${OPTION}" "${1}" || return 1 ;;

            "dnf" )
                dnf upgrade && dnf install "${1}" ;;

            "pacman" )
                pacman -Syu && pacman -S "${1}" ;;

            "gentoo" )
                emerge -u @world && emerge "${1}" ;;

            "urpmi" )
                urpmi --auto-update && urpmi "${1}" ;;

            "yum" )
                yum update && yum install "${1}" ;;

            "zypper" )
                zypper refresh && zypper in "${1}" ;;

            * )
                false ;;
        esac

        PrintSuffixPassOrFail "Installing software packages..."
        return "${?}"
    }

    function IsInstalledPackage
    {
        if [[ -z "${_PACKAGE_MANAGER}" ]] \
            || [[ -z "${1}" ]]; then
            echo -e "${_PREFIX_ERROR} Input values are empty."
            return 1
        fi

        local GET_COMMAND=""

        # <remarks> Check if package is not installed </remarks>
        case "${_PACKAGE_MANAGER}" in
            "apt" )
                GET_COMMAND="sudo dpkg -s" ;;

            * )
                return 1 ;;
        esac

        local -i COUNT_DELIM=$( echo "${1}" | wc -w )
        local GET_PACKAGE='echo "${1}" | cut -d ' ' -f "${COUNT_DELIM}"'

        while [[ ! -z "${PACKAGE}" ]]; do
            local PACKAGE=$( eval "${GET_PACKAGE}" )
            eval "${GET_COMMAND} ${PACKAGE}" || return 1
            (( COUNT_DELIM-- ))
        done

        return 0
    }

    function UninstallPackage
    {
        if [[ -z "${_PACKAGE_MANAGER}" ]] \
            || [[ -z "${1}" ]]; then
            echo -e "${_PREFIX_ERROR} Input values are empty."
            return 1
        fi

        # <remarks> Uninstall selected packages </remarks>
        case "${_PACKAGE_MANAGER}" in
            "apt" )
                apt uninstall "${1}" ;;

            "dnf" )
                dnf remove "${1}" ;;

            "pacman" )
                pacman -R "${1}" ;;

            "gentoo" )
                emerge -Cv "${1}" ;;

            "urpmi" )
                urpme "${1}" ;;

            "yum" )
                yum remove "${1}" ;;

            "zypper" )
                zypper remove "${1}" ;;

            * )
                false ;;
        esac

        PrintSuffixPassOrFail "Uninstalling software packages..."
        return "${?}"
    }

    function UpdateOrCloneGitRepo
    {
        local DO_AUTO_ANSWER_YES=false

        if [[ "${4}" == true ]]; then
            DO_AUTO_ANSWER_YES=true
        fi

        if [[ -z "${3}" ]] \
            || [[ -z "${2}" ]] \
            || [[ -z "${1}" ]]; then
            echo -e "${_PREFIX_ERROR} Input values are empty."
            return 1
        fi

        if [[ ! -d "${1}${2}" ]] \
            && ! sudo mkdir -p "${1}${3}"; then
            echo -e "${_PREFIX_ERROR} Failed to create directory '${1}${3}'."
            return 1
        fi

        # <remarks> Update existing GitHub repository. </remarks>
        if [[ -d "${1}${2}" ]]; then
            cd "${1}${2}"

            if ! git pull &> /dev/null; then
                echo -e "${_PREFIX_ERROR} Failed to update repository."
                return 1
            fi

            return 0

        # <remarks> Clone new GitHub repository. </remarks>
        elif [[ -d "${1}${3}" ]]; then
            for COUNT in "${_COUNT_LIST[@]}"; do
                if ! "${DO_AUTO_ANSWER_YES}"; then
                    read -r -p "Clone repo '${2}'? [Y/n]: " ANSWER
                else
                    ANSWER="Y"
                fi

                case "${ANSWER}" in
                    [Yy]* )
                        cd "${1}${3}"

                        if ! git clone "https://github.com/${2}" &> /dev/null; then
                            echo -e "${_PREFIX_ERROR} Failed to download repository."
                            return 1
                        fi

                        return 0 ;;

                    [Nn]* )
                        return 255 ;;

                    * )
                        echo "Please answer 'Y' or 'N'." ;;
                esac
            done

            return 1

        else
            return 1
        fi
    }
# </functions>

# <main>
    SetParameters
    unset SetParameters
# </main>