#!/bin/false

#
# Filename:         lib-pacman
# Description:      Modify package sources.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <sources>
    source lib-system
# </sources>

# <functions>
    function SetParameters
    {
        if "${_ARE_PARAMS_SET_LIB_PACMAN}"; then
            return 0
        fi

        declare -gr _ARE_PARAMS_SET_LIB_PACMAN=true

        declare -g _OPERATING_SYSTEM_PREFERRED_RELEASE_NAME=""
        declare -gr _OPERATING_SYSTEM_RELEASE_NAME=$( lsb_release -c | awk 'END {print $2}' )
        declare -gr _OPERATING_SYSTEM_RELEASE_NUMBER=$( lsb_release -r | awk 'END {print $2}' )
        declare -gr _SOURCES_FILE_NAME="/etc/apt/sources.list"

        # <summary> Debian </summary>
            declare -gr _DEBIAN_LATEST_RELEASE_NAME="bookworm"
            declare -gr _DEBIAN_RELEASE_OPTION_BACKPORTS="${_OPERATING_SYSTEM_RELEASE_NAME}-backports"
            declare -alr _DEBIAN_RELEASE_BRANCH_LIST=(
                "stable"
                "testing"
                "unstable"
            )

            declare -alr _DEBIAN_RELEASE_OPTIONS_LIST=(
                "main"
                "contrib"
                "non-free"
                "non-free-firmware"
            )

        # <remarks> Functions can go here. </remarks>
    }

    function DoesSourcesFileExist
    {
        if ! find "${_SOURCES_FILE_NAME}" &> /dev/null; then
            echo -e "Failed to find package sources file."
            return 1
        fi

        return 0
    }

    function GetPromptsFromAnswerList
    {
        local -n ANSWER_LIST_REFERENCE="${1}"
        local -n PROMPT_REFERENCE="${2}"
        local -n WARNING_REFERENCE="${3}"
        PROMPT_REFERENCE=""
        WARNING_REFERENCE=""
        local -i LIST_MAX_INDEX=$( head -n 1 <<< $( sort -r <<< "${!ANSWER_LIST_REFERENCE[*]}" ) )

        for KEY in "${!ANSWER_LIST_REFERENCE[@]}"; do
            local ANSWER="${ANSWER_LIST_REFERENCE[$KEY]}"
            local FORMATTED_ANSWER="("$( echo ${ANSWER::1} | tr '[:lower:]' '[:upper:]' )")${ANSWER:1}"
            local FORMATTED_WARNING="'"$( echo ${ANSWER::1} | tr '[:lower:]' '[:upper:]' )'"'

            if [[ "${KEY}" -lt "${#LIST_MAX_INDEX[@]}" ]]; then
                ROMPT_REFERENCE+="${FORMATTED_ANSWER}/"
                WARNING_REFERENCE+="${FORMATTED_WARNING}, "
            else
                ROMPT_REFERENCE+="${FORMATTED_ANSWER}"
                WARNING_REFERENCE+="or ${FORMATTED_WARNING}."
            fi
        done

        PROMPT_REFERENCE="[${PROMPT_REFERENCE}]: "
        WARNING_REFERENCE="Please answer ${WARNING_REFERENCE}."
        return 0
    }

    function GetReleaseOptionsFromPrompt
    {
        local -n REFERENCE="${1}"
        local ANSWER_LIST PROMPT WARNING
        SetReleaseOptions "ANSWER_LIST" || return 1
        GetPromptFromAnswerList "ANSWER_LIST" "PROMPT" "WARNING"

        for COUNT in "${_COUNT_LIST[@]}"; do
            local -l ANSWER
            echo -e "Append release option(s)?"
            read -r -p "${PROMPT}" ANSWER


            # move this into a separate function?
            local -i INDEX=1

            while true; do
                local CHOICE=$( echo "${ANSWER}" | cut -d ' ' -f ${INDEX} )
                [ -z "${CHOICE}" ] || break
                CHOSEN_LIST+=( "${CHOICE}" )
                (( INDEX++ ))
            done

            for THE_CHOICE in "${CHOSEN_LIST[@]}"; do
                grep -Eiq "${THE_CHOICE}" <<< "${!ANSWER_LIST[*]}" || break

                if [[ "${THE_CHOICE}" == "${ANSWER}" ]]; then
                    REFERENCE+="${THE_CHOICE} "
                fi
            done

            if [[ "${?}" -eq 0 ]]; then
                return 0
            fi

            echo -e "${WARNING}"
        done

        return 1
    }

    function GetReleaseBranchFromPrompt
    {
        local -n REFERENCE="${1}"
        local ANSWER_LIST PROMPT WARNING
        SetReleaseBranch "ANSWER_LIST" || return 1
        GetPromptFromAnswerList "ANSWER_LIST" "PROMPT" "WARNING"

        for COUNT in "${_COUNT_LIST[@]}"; do
            local -l ANSWER
            echo -e "Select ${_OPERATING_SYSTEM_DISTRIBUTION_NAME} release branch."
            read -r -p "${PROMPT}" ANSWER

            for THE_ANSWER in "${ANSWER_LIST[@]}"; do
                if [[ "${THE_ANSWER}" == "${ANSWER}" ]]; then
                    REFERENCE="${ANSWER}"
                    return 0
                fi
            done

            echo -e "${WARNING}"
        done

        return 1
    }

    function PromptToChangeSourcesFile
    {
        local -al ANSWER_LIST=(
            "branch"
            "version"
            "none"
        )

        local PROMPT WARNING
        GetPromptFromAnswerList "ANSWER_LIST" "PROMPT" "WARNING"

        for COUNT in "${_COUNT_LIST[@]}"; do
            local -l ANSWER
            echo -e "Change ${_OPERATING_SYSTEM_DISTRIBUTION_NAME} sources file?"
            read -r -p "${PROMPT}" ANSWER

            case "${ANSWER}" in
                "${ANSWER_LIST[0]}" )
                    GetReleaseBranchFromPrompt "_OPERATING_SYSTEM_PREFERRED_RELEASE_NAME"
                    return "${?}" ;;

                "${ANSWER_LIST[1]}" )
                    SetReleaseVersion "_OPERATING_SYSTEM_PREFERRED_RELEASE_NAME"
                    return "${?}" ;;
            esac

            echo -e "${WARNING}"
        done

        return 0
    }

    function SetReleaseBranch
    {
        local -n REFERENCE="${1}"

        case true in
            "${_SYSTEM_IS_DEBIAN}" )
                REFERENCE="${_DEBIAN_RELEASE_BRANCH_LIST[@]}" ;;

            * )
                echo -e "Operating system is not supported."
                return 1 ;;
        esac

        return 0
    }

    function SetReleaseOptions
    {
        local -n REFERENCE="${1}"

        case true in
            "${_SYSTEM_IS_DEBIAN}" )
                REFERENCE="${_DEBIAN_RELEASE_OPTIONS_LIST[@]}" ;;
        esac

        return 0
    }

    function SetReleaseVersion
    {
        local -n REFERENCE="${1}"

        case true in
            "${_SYSTEM_IS_DEBIAN}" )
                REFERENCE="${_DEBIAN_LATEST_RELEASE_NUMBER}" ;;

            * )
                echo -e "Operating system is not supported."
                return 1 ;;
        esac

        return 0
    }

    function UpdateSourcesFile
    {
        if ! DoesSourcesFileExist \
            || ! sed -i "s/${_OPERATING_SYSTEM_RELEASE_NAME}/${_OPERATING_SYSTEM_PREFERRED_RELEASE_NAME}/g" "${_SOURCES_FILE_NAME}" &> /dev/null; then
            echo -e "Failed to edit package sources file."
            return 1
        fi

        return 0
    }
# </functions>

# <main>
    SetParameters
    unset SetParameters
# </main>